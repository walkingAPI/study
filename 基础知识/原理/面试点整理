1、vue实现双向数据绑定原理是什么？
数据变化更新视图，视图变化更新数据
关键点在于 data 如何更新view
因为 view 更新 data 其实可以通过事件监听即可，比如 input 标签监听 'input' 事件就可以实现了。

而数据更新视图的重点是如何知道数据变了，只要知道数据变了，那么接下去的事都好处理。如何知道数据变了，就是通过Object.defineProperty( )对属性设置一个set函数，当数据改变了就会来触发这个函数，所以我们只要将一些需要更新的方法放在这里面就可以实现data更新view了。

核心点:Object.defineProperty(obj,prop,descriptor)
obj 需要定义属性的当前对象
prop 当前需要定义的属性名
desc 属性描述符
通过Object.defineProperty()定义属性，通过描述符的设置可以进行更精准的控制对象属性。
vue双向绑定就是通过属性描述符中的get和set方法，去精准监听对象的属性；
但是，defineProperty参数只接收obj
为了解决检测数组的变化，vue创建了新的对象create(),并把原型指向了数组，并且在新的对象里，重新定义了数组的方法；

1.1、Object.defineProperty缺点
深度监听，需要递归到底，一次性计算量大
无法监听新增属性/删除属性(Vue.set  Vue.delete)
无法原生监听数组，需要特殊处理

1.2、vue3是如何实现响应式的？
vue3使用proxy来实现data状态改变的拦截，proxy(target,proxyConf)   target是监听的data对象，proxyConf是proxy的配置  proxy配合Reflect实现了get、set、deleteProperty等方法

1.3、vue3响应式的优缺点？
深度监听性能更好
可监听新增/删除的属性
可监听数组的变化
proxy规避了defineproperty的问题
但无法兼容所有浏览器
无法polyfill

2、v-model语法糖是怎么实现的？
    <!-- 在普通标签上 -->
    <input v-model="sth" />  //这一行等于下一行
    <input v-bind:value="sth" v-on:input="sth = $event.target.value" />

3、Hash和history有什么区别？
hash 模式：在浏览器中符号 #  ，#以及#后⾯的字符称之为 hash ，⽤ window.location.hash 读取。特点： hash 虽然在 URL 中，但不被包括在 HTTP 请求中；⽤来指导浏览器动作， hash 不会重加载⻚⾯。
history 模式：h istory 采⽤ HTML5 的新特性；且提供了两个新⽅法：pushState() ， replaceState() 可以对浏览器历史记录栈进⾏修改，以及 popState 事件的监听到状态变更

4、什么是深拷贝和浅拷贝?以及怎么实现深拷贝和浅拷贝?
浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。
    1.Object.assign()
    2.let obj2= {... obj1}
    3.Array.prototype.concat()
    4.Array.prototype.slice()

深拷贝是将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。
    1.JSON.parse(JSON.stringify())
    2.jQuery.extend()方法
    3.手写递归方法

5、什么是原型什么是原型链?

6、箭头函数和普通函数有什么区别?
    1、箭头函数不可作为构造函数，不能使用new
    2、箭头函数没有自己的this
    3、箭头函数没有arguments对象
    4、箭头函数没有原型对象

7、New操作符做了什么事情?
    分析一下new的整个过程：
    1、创建一个空对象
    2、继承构造函数的原型
    3、this指向obj，并调用构造函数
    4、返回对象
    function myNew (fn, ...args) {
        // 第一步：创建一个空对象
        const obj = {}
        // 第二步：继承构造函数的原型
        obj.__proto__ =  fn.prototype
        // 第三步：this指向obj，并调用构造函数
        fn.apply(obj, args)
        // 第四步：返回对象
        return obj
    }

8、说一下eventloop

9、什么是闭包，闭包的作用是什么？
当一个内部函数被调用，就会形成闭包，闭包就是能够读取其他函数内部变量的函数。
闭包作用：
局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。

10、Promise是什么?

11、Set 和 Map有什么区别？
    1、Map是键值对，Set是值得集合，当然键和值可以是任何得值
    2、Map可以通过get方法获取值，而set不能因为它只有值
    3、都能通过迭代器进行for...of 遍历
    4、Set的值是唯一的可以做数组去重，而Map由于没有格式限制，可以做数据存储

12、map和foreach有什么区别？
foreach()方法会针对每一个元素执行提供得函数,该方法没有返回值,是否会改变原数组取决与数组元素的类型是基本类型还是引用类型
map()方法不会改变原数组的值,返回一个新数组,新数组中的值为原数组调用函数处理之后的值；map是纯函数

13、localStorage  sessionStorage  cookies 有什么区别?
localStorage:以键值对的方式存储 储存时间没有限制 永不生效 除非自己删除记录
sessionStorage：当页面关闭后被清理与其他相比不能同源窗口共享 是会话级别的存储方式
cookies 数据不能超过4k 同时因为每次http请求都会携带cookie 所有cookie只适合保存很小的数据 如会话标识

14、Vuex有哪些基本属性?为什么 Vuex 的 mutation 中不能做异步操作?
有五种，分别是 State、 Getter、Mutation 、Action、 Module
    1、state => 基本数据(数据源存放地)
    2、getters => 从基本数据派生出来的数据
    3、mutations => 提交更改数据的方法，同步
    4、actions => 像一个装饰器，包裹mutations，使之可以异步。
    5、modules => 模块化Vuex

1、Vuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交 mutation实现。
2、每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。

15、Loader和Plugin 有什么区别？
Loader：直译为"加载器"。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到`loader`。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。
Plugin：直译为"插件"。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。

16、UDP和TCP有什么区别？
TCP与UDP基本区别
    1.基于连接与无连接
    2.TCP要求系统资源较多，UDP较少；
    3.UDP程序结构较简单
    4.流模式（TCP）与数据报模式(UDP);
    5.TCP保证数据正确性，UDP可能丢包
    6.TCP保证数据顺序，UDP不保证
UDP应用场景：
    1.面向数据报方式
    2.网络数据大多为短消息
    3.拥有大量Client
    4.对数据安全性无特殊要求
    5.网络负担非常重，但对响应速度要求高

18、项目中常用的性能优化方式有哪些?
性能优化原则
    多使用内存、缓存或其他方法
    减少CPU计算量，减少网络加载耗时
    空间换时间
如何入手：
A.让加载更快：
    1.减少资源体积：压缩代码  如：webpage进行的代码压缩 服务端的gzip， 图片压缩
    2.减少访问次数：合并代码， css雪碧图 SSR服务端渲染，缓存
    3.使用更快的网络：CDN

B.让渲染更快：
    1.CSS放在head，JS放在body最下面
    2.尽早开始执行JS，用DOMContentLoaded触发
    3.懒加载（图片懒加载，上滑加载更多）
    4.对DOM查询进行缓存
    5.频繁DOM操作，合并到一起插入DOM结构 （fragment）
    6.节流throttle 防抖debounce

19、怎么解决跨域问题的，你是怎么配置的？
如果后端配合就用JSONP，封装个回调函数给后台
如果后端联系不上，就用vue-CLI自带的webpack服务，在vue.config.JS里 proxy代理配置一下

20、计算属性和watch有什么区别?以及它们的运用场景?
// 区别
  computed 计算属性：依赖其它属性值，并且computed的值有缓存，只有它依赖的属性值发生改变，下一次获取computed的值时才会重新计算computed的值。
  watch 侦听器：更多的是观察的作用,无缓存性,类似与某些数据的监听回调,每当监听的数据变化时都会执行回调进行后续操作
//运用场景
  当需要进行数值计算,并且依赖与其它数据时,应该使用computed,因为可以利用computed的缓存属性,避免每次获取值时都要重新计算。
  当需要在数据变化时执行异步或开销较大的操作时,应该使用watch,使用watch选项允许执行异步操作（访问一个API),限制执行该操作的频率，并在得到最终结果前，设置中间状态。这些都是计算属性无法做到的。

21、Vue的生命周期是什么 每个钩子里面具体做了什么事情？
Vue 实例有⼀个完整的⽣命周期，也就是从开始创建、初始化数据、编译模版、挂载Dom -> 渲染、更新 -> 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。
1、beforeCreate（创建前） ：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。
2、created（创建后） ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 `$el` 属性。
3、beforeMount（挂载前） ：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。此时还没有挂载html到页面上。
4、mounted（挂载后） ：在el被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html 页面中。此过程中进行ajax交互。
5、beforeUpdate（更新前） ：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。
6、updated（更新后）：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。
7、beforeDestroy（销毁前） ：实例销毁之前调用。这一步，实例仍然完全可用，`this` 仍能获取到实例。
8、destroyed（销毁后） ：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。
另外还有 `keep-alive` 独有的生命周期，分别为 `activated` 和 `deactivated` 。用 `keep-alive` 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 `deactivated` 钩子函数，命中缓存渲染后会执行 `activated` 钩子函数。



















